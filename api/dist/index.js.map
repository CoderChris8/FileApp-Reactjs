{"version":3,"sources":["../src/index.js"],"names":["storageDir","path","join","__dirname","storageConfig","multer","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","storage","PORT","app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","set","err","db","console","log","AppRouter","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;AAEA;;;;;;AAEA;;AALA;AAOA,IAAMA,aAAaC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,SAA3B,CAAnB;AALA;;AAMA,IAAMC,gBAAgBC,iBAAOC,WAAP,CAAmB;AACxCC,cAAc,qBAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAC/BA,KAAG,IAAH,EAASV,UAAT;AACD,EAHuC;AAIxCW,WAAW,kBAACH,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAC5BA,KAAG,IAAH,EAASE,KAAKC,GAAL,KAAaZ,eAAKa,OAAL,CAAaL,KAAKM,YAAlB,CAAtB;AACD;AANuC,CAAnB,CAAtB;;AASE,IAAMC,SAAS,sBAAO,EAAEC,SAASb,aAAX,EAAP,CAAf;;AAEF,IAAMc,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQ,oBAAK;AACZC,iBAAgB;AADJ,CAAL,CAAR;;AAIAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACvBC,QAAQ;AADe,CAAhB,CAAR;;AAIAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgBzB,SAAhB;AACAgB,IAAIS,GAAJ,CAAQ,YAAR,EAAsB5B,UAAtB;AACAmB,IAAIS,GAAJ,CAAQ,QAAR,EAAkBZ,MAAlB;;AAEA;;AAEA,uBAAQ,UAACa,GAAD,EAAMC,EAAN,EAAa;;AAEpB,KAAGD,GAAH,EAAQ;AACPE,UAAQC,GAAR,CAAY,qCAAZ,EAAmDH,GAAnD;AACA,QAAOA,GAAP;AACA;;AAEDV,KAAIS,GAAJ,CAAQ,IAAR,EAAcE,EAAd;;AAEA;;AAEA,KAAIG,gBAAJ,CAAcd,GAAd,EAXoB,CAWD;;AAEnBA,KAAIC,MAAJ,CAAWc,MAAX,CAAkBC,QAAQC,GAAR,CAAYlB,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AACjDa,UAAQC,GAAR,6BAAsCb,IAAIC,MAAJ,CAAWiB,OAAX,GAAqBC,IAA3D;AACA,EAFD;AAIA,CAjBD;;kBAmBenB,G;;AAEf;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport multer from 'multer';\nimport path from 'path';\n\n// links database from src/database.js\nimport {connect} from \"./database\";\n// links router.js \nimport AppRouter from './router';\n\n// File storage config\n\nconst storageDir = path.join(__dirname, '..', 'storage');\nconst storageConfig = multer.diskStorage({\n\tdestination:  (req, file, cb) => {\n\t  cb(null, storageDir)\n\t},\n\tfilename:  (req, file, cb) => {\n\t  cb(null, Date.now() + path.extname(file.originalname))\n\t}\n  });\n\n  const upload = multer({ storage: storageConfig })\n\nconst PORT = 3002;\nconst app = express();\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: \"*\"\n}));\n\napp.use(bodyParser.json({\n\tlimit : '50mb'\n}));\n\napp.set('root', __dirname);\napp.set('storageDir', storageDir);\napp.set('upload', upload);\n\n// Connect to the database.\n\nconnect((err, db) => {\n\n\tif(err) {\n\t\tconsole.log('An error connecting to the database', err);\n\t\tthrow (err)\n\t}\n\n\tapp.set('db', db);\n\n\t// initiates the router.\n\n\tnew AppRouter(app) // passes app to router.js\n\n\tapp.server.listen(process.env.PORT || PORT, () => {\n\t\tconsole.log(`App is running on port ${app.server.address().port}`);\n\t});\n\n});\n\nexport default app;\n\n// connect to db\n// initializeDb( db => {\n\n// \t// internal middleware\n// \tapp.use(middleware({ config, db }));\n\n// \t// api router\n// \tapp.use('/api', api({ config, db }));\n\n// \tapp.server.listen(process.env.PORT || config.port, () => {\n// \t\tconsole.log(`Started on port ${app.server.address().port}`);\n// \t});\n// });\n\n// export default app;"]}